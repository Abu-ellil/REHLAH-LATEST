import React, { useState, useEffect } from 'react';
import {
  View,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { useAppSelector, useAppDispatch } from '@/store/hooks';
import { ุชุญุฏูุซ_ุฑุญูุฉ } from '@/store/slices/ุฑุญูุงุชSlice';
import { ุญุฐู_ูุดุชุฑูุงุช_ุงููุณุชุฎุฏู } from '@/store/slices/ูุดุชุฑูุงุชSlice';
import { useColorScheme } from '@/hooks/useColorScheme';
import { formatAmount } from '@/utils/helpers';

export default function ุดุงุดุฉ_ุชุนุฏูู_ุงูุฑุญูุฉ() {
  const { tripId } = useLocalSearchParams();
  const colorScheme = useColorScheme();
  const dispatch = useAppDispatch();
  
  const { ุงูุฑุญูุงุช } = useAppSelector(state => state.ุฑุญูุงุช);
  const { ุงููุณุชุฎุฏููู } = useAppSelector(state => state.ูุณุชุฎุฏููู);
  const { ุงููุดุชุฑูุงุช } = useAppSelector(state => state.ูุดุชุฑูุงุช);

  const isDark = colorScheme === 'dark';
  const ุงูุฑุญูุฉ = ุงูุฑุญูุงุช.find(ุฑ => ุฑ.id === tripId);

  // ุญุงูุฉ ุงููููุฐุฌ
  const [ุงุณู_ุงูุฑุญูุฉ, ุชุนููู_ุงุณู_ุงูุฑุญูุฉ] = useState('');
  const [ูุตู_ุงูุฑุญูุฉ, ุชุนููู_ูุตู_ุงูุฑุญูุฉ] = useState('');
  const [ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ, ุชุนููู_ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ] = useState(new Date());
  const [ุชุงุฑูุฎ_ุงูููุงูุฉ, ุชุนููู_ุชุงุฑูุฎ_ุงูููุงูุฉ] = useState(new Date());
  const [ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู, ุชุนููู_ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู] = useState('0');
  const [ุงููุดุงุฑููู_ุงููุญุฏุฏูู, ุชุนููู_ุงููุดุงุฑููู_ุงููุญุฏุฏูู] = useState<string[]>([]);
  const [ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ, ุชุนููู_ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ] = useState<{ [ูุนุฑู: string]: string }>({});
  const [ุนุฑุถ_ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ, ุชุนููู_ุนุฑุถ_ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ] = useState(false);
  const [ุนุฑุถ_ุชุงุฑูุฎ_ุงูููุงูุฉ, ุชุนููู_ุนุฑุถ_ุชุงุฑูุฎ_ุงูููุงูุฉ] = useState(false);

  // ุชุญููู ุจูุงูุงุช ุงูุฑุญูุฉ
  useEffect(() => {
    if (ุงูุฑุญูุฉ) {
      ุชุนููู_ุงุณู_ุงูุฑุญูุฉ(ุงูุฑุญูุฉ.ุงูุงุณู);
      ุชุนููู_ูุตู_ุงูุฑุญูุฉ(ุงูุฑุญูุฉ.ุงููุตู || '');
      ุชุนููู_ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ(new Date(ุงูุฑุญูุฉ.ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ));
      ุชุนููู_ุชุงุฑูุฎ_ุงูููุงูุฉ(new Date(ุงูุฑุญูุฉ.ุชุงุฑูุฎ_ุงูููุงูุฉ || ุงูุฑุญูุฉ.ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ));
      ุชุนููู_ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู(ุงูุฑุญูุฉ.ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู?.toString() || '0');
      ุชุนููู_ุงููุดุงุฑููู_ุงููุญุฏุฏูู(ุงูุฑุญูุฉ.ุงููุดุงุฑููู || []);
      
      // ุชุญููู ุงููุจุงูุบ ุงููุณุชุญูุฉ ุงููุฑุฏูุฉ ุฅูู ูุตูุต
      const ูุจุงูุบ_ูุตูุฉ: { [ูุนุฑู: string]: string } = {};
      Object.entries(ุงูุฑุญูุฉ.ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ || {}).forEach(([ูุนุฑู, ูุจูุบ]) => {
        ูุจุงูุบ_ูุตูุฉ[ูุนุฑู] = ูุจูุบ.toString();
      });
      ุชุนููู_ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ(ูุจุงูุบ_ูุตูุฉ);
    }
  }, [ุงูุฑุญูุฉ]);

  if (!ุงูุฑุญูุฉ) {
    return (
      <ThemedView style={styles.container}>
        <View style={styles.errorContainer}>
          <Ionicons name="alert-circle" size={64} color="#FF3B30" />
          <ThemedText type="subtitle" style={styles.errorTitle}>
            ุงูุฑุญูุฉ ุบูุฑ ููุฌูุฏุฉ
          </ThemedText>
          <TouchableOpacity
            style={[styles.button, { backgroundColor: '#007AFF' }]}
            onPress={() => router.back()}
          >
            <ThemedText style={[styles.buttonText, { color: 'white' }]}>
              ุงูุนูุฏุฉ
            </ThemedText>
          </TouchableOpacity>
        </View>
      </ThemedView>
    );
  }

  const ุชุจุฏูู_ูุดุงุฑู = (ูุนุฑู_ุงููุณุชุฎุฏู: string) => {
    if (ุงููุดุงุฑููู_ุงููุญุฏุฏูู.includes(ูุนุฑู_ุงููุณุชุฎุฏู)) {
      // ุฅุฒุงูุฉ ุงููุดุงุฑู
      ุชุนููู_ุงููุดุงุฑููู_ุงููุญุฏุฏูู(ุงููุดุงุฑููู_ุงููุญุฏุฏูู.filter(id => id !== ูุนุฑู_ุงููุณุชุฎุฏู));
      
      // ุฅุฒุงูุฉ ุงููุจูุบ ุงููุณุชุญู
      const ูุจุงูุบ_ุฌุฏูุฏุฉ = { ...ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ };
      delete ูุจุงูุบ_ุฌุฏูุฏุฉ[ูุนุฑู_ุงููุณุชุฎุฏู];
      ุชุนููู_ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ(ูุจุงูุบ_ุฌุฏูุฏุฉ);
      
      // ุญุฐู ูุดุชุฑูุงุช ูุฐุง ุงููุณุชุฎุฏู ูู ุงูุฑุญูุฉ
      dispatch(ุญุฐู_ูุดุชุฑูุงุช_ุงููุณุชุฎุฏู({ 
        ูุนุฑู_ุงูุฑุญูุฉ: ุงูุฑุญูุฉ.id, 
        ูุนุฑู_ุงููุณุชุฎุฏู 
      }));
    } else {
      // ุฅุถุงูุฉ ุงููุดุงุฑู
      ุชุนููู_ุงููุดุงุฑููู_ุงููุญุฏุฏูู([...ุงููุดุงุฑููู_ุงููุญุฏุฏูู, ูุนุฑู_ุงููุณุชุฎุฏู]);
      ุชุนููู_ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ({
        ...ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ,
        [ูุนุฑู_ุงููุณุชุฎุฏู]: ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู || '0'
      });
    }
  };

  const ุชุญุฏูุซ_ุงููุจูุบ_ุงููุณุชุญู_ุงููุฑุฏู = (ูุนุฑู_ุงููุณุชุฎุฏู: string, ูุจูุบ: string) => {
    ุชุนููู_ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ({
      ...ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ,
      [ูุนุฑู_ุงููุณุชุฎุฏู]: ูุจูุบ
    });
  };

  const ุชุทุจูู_ุงููุจูุบ_ุงูุนุงู_ุนูู_ุงูุฌููุน = () => {
    const ูุจุงูุบ_ูุญุฏุซุฉ: { [ูุนุฑู: string]: string } = {};
    ุงููุดุงุฑููู_ุงููุญุฏุฏูู.forEach(ูุนุฑู => {
      ูุจุงูุบ_ูุญุฏุซุฉ[ูุนุฑู] = ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู;
    });
    ุชุนููู_ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ(ูุจุงูุบ_ูุญุฏุซุฉ);
  };

  const ุญุณุงุจ_ุฅุฌูุงูู_ุงููุดุชุฑูุงุช_ูููุณุชุฎุฏู = (ูุนุฑู_ุงููุณุชุฎุฏู: string): number => {
    return ุงููุดุชุฑูุงุช
      .filter(ู => ู.ูุนุฑู_ุงูุฑุญูุฉ === ุงูุฑุญูุฉ.id && ู.ูุนุฑู_ุงููุณุชุฎุฏู === ูุนุฑู_ุงููุณุชุฎุฏู)
      .reduce((ูุฌููุน, ู) => ูุฌููุน + ู.ุงููุจูุบ, 0);
  };

  const ุญุณุงุจ_ุงููุจูุบ_ุงููุชุจูู_ูููุณุชุฎุฏู = (ูุนุฑู_ุงููุณุชุฎุฏู: string): number => {
    const ุงููุจูุบ_ุงููุณุชุญู = parseFloat(ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ[ูุนุฑู_ุงููุณุชุฎุฏู] || '0');
    const ุฅุฌูุงูู_ุงููุดุชุฑูุงุช = ุญุณุงุจ_ุฅุฌูุงูู_ุงููุดุชุฑูุงุช_ูููุณุชุฎุฏู(ูุนุฑู_ุงููุณุชุฎุฏู);
    return ุงููุจูุบ_ุงููุณุชุญู - ุฅุฌูุงูู_ุงููุดุชุฑูุงุช;
  };

  const ุญูุธ_ุงูุชุนุฏููุงุช = () => {
    // ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช
    if (!ุงุณู_ุงูุฑุญูุฉ.trim()) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุฅุฏุฎุงู ุงุณู ุงูุฑุญูุฉ');
      return;
    }

    if (ุงููุดุงุฑููู_ุงููุญุฏุฏูู.length === 0) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุงุฎุชูุงุฑ ูุดุงุฑู ูุงุญุฏ ุนูู ุงูุฃูู');
      return;
    }

    if (ุชุงุฑูุฎ_ุงูููุงูุฉ < ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ) {
      Alert.alert('ุฎุทุฃ', 'ุชุงุฑูุฎ ุงูููุงูุฉ ูุฌุจ ุฃู ูููู ุจุนุฏ ุชุงุฑูุฎ ุงูุจุฏุงูุฉ');
      return;
    }

    // ุชุญุฏูุซ ุงูุฑุญูุฉ
    const ุฑุญูุฉ_ูุญุฏุซุฉ = {
      ...ุงูุฑุญูุฉ,
      ุงูุงุณู: ุงุณู_ุงูุฑุญูุฉ.trim(),
      ุงููุตู: ูุตู_ุงูุฑุญูุฉ.trim(),
      ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ: ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ.toISOString().split('T')[0],
      ุชุงุฑูุฎ_ุงูููุงูุฉ: ุชุงุฑูุฎ_ุงูููุงูุฉ.toISOString().split('T')[0],
      ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู: parseFloat(ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู) || 0,
      ุงููุดุงุฑููู: ุงููุดุงุฑููู_ุงููุญุฏุฏูู,
      ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ: Object.fromEntries(
        Object.entries(ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ).map(([ูุนุฑู, ูุจูุบ]) => [ูุนุฑู, parseFloat(ูุจูุบ) || 0])
      ),
      ุชุงุฑูุฎ_ุงูุชุญุฏูุซ: new Date().toISOString(),
    };

    dispatch(ุชุญุฏูุซ_ุฑุญูุฉ(ุฑุญูุฉ_ูุญุฏุซุฉ));
    Alert.alert('ูุฌุญ', 'ุชู ุชุญุฏูุซ ุงูุฑุญูุฉ ุจูุฌุงุญ', [
      { text: 'ููุงูู', onPress: () => router.back() }
    ]);
  };

  const ุนุฑุถ_ูุณุชุฎุฏู = (ูุณุชุฎุฏู: any) => {
    const ูุญุฏุฏ = ุงููุดุงุฑููู_ุงููุญุฏุฏูู.includes(ูุณุชุฎุฏู.id);
    const ุงููุจูุบ_ุงููุณุชุญู = parseFloat(ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ[ูุณุชุฎุฏู.id] || '0');
    const ุฅุฌูุงูู_ุงููุดุชุฑูุงุช = ุญุณุงุจ_ุฅุฌูุงูู_ุงููุดุชุฑูุงุช_ูููุณุชุฎุฏู(ูุณุชุฎุฏู.id);
    const ุงููุจูุบ_ุงููุชุจูู = ุญุณุงุจ_ุงููุจูุบ_ุงููุชุจูู_ูููุณุชุฎุฏู(ูุณุชุฎุฏู.id);
    
    return (
      <View key={ูุณุชุฎุฏู.id} style={styles.userContainer}>
        <TouchableOpacity
          style={[
            styles.userCard,
            { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' },
            ูุญุฏุฏ && { borderColor: '#007AFF', borderWidth: 2 }
          ]}
          onPress={() => ุชุจุฏูู_ูุดุงุฑู(ูุณุชุฎุฏู.id)}
        >
          <View style={styles.userInfo}>
            <View style={styles.userAvatar}>
              <ThemedText style={styles.avatarText}>
                {ูุณุชุฎุฏู.ุงูุตูุฑุฉ_ุงูุฑูุฒูุฉ || '๐ค'}
              </ThemedText>
            </View>
            <View style={styles.userDetails}>
              <ThemedText type="default" style={styles.userName}>
                {ูุณุชุฎุฏู.ุงูุงุณู}
              </ThemedText>
              {ูุญุฏุฏ && (
                <View style={styles.userStats}>
                  <ThemedText type="caption" style={styles.statText}>
                    ูุดุชุฑูุงุช: {formatAmount(ุฅุฌูุงูู_ุงููุดุชุฑูุงุช, ุงูุฑุญูุฉ.ุงูุนููุฉ)}
                  </ThemedText>
                  <ThemedText 
                    type="caption" 
                    style={[
                      styles.statText,
                      { color: ุงููุจูุบ_ุงููุชุจูู >= 0 ? '#34C759' : '#FF3B30' }
                    ]}
                  >
                    ูุชุจูู: {formatAmount(ุงููุจูุบ_ุงููุชุจูู, ุงูุฑุญูุฉ.ุงูุนููุฉ)}
                  </ThemedText>
                </View>
              )}
            </View>
          </View>
          <View style={styles.checkboxContainer}>
            {ูุญุฏุฏ && (
              <Ionicons name="checkmark-circle" size={24} color="#007AFF" />
            )}
            {!ูุญุฏุฏ && (
              <View style={[styles.checkbox, { borderColor: isDark ? '#666' : '#CCC' }]} />
            )}
          </View>
        </TouchableOpacity>
        
        {ูุญุฏุฏ && (
          <View style={[styles.amountContainer, { backgroundColor: isDark ? '#1C1C1E' : '#F2F2F7' }]}>
            <ThemedText type="caption" style={styles.amountLabel}>
              ุงููุจูุบ ุงููุณุชุญู:
            </ThemedText>
            <TextInput
              style={[
                styles.amountInput,
                { 
                  backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF',
                  color: isDark ? '#FFFFFF' : '#000000',
                  borderColor: isDark ? '#666' : '#CCC'
                }
              ]}
              value={ุงููุจุงูุบ_ุงููุณุชุญูุฉ_ุงููุฑุฏูุฉ[ูุณุชุฎุฏู.id] || '0'}
              onChangeText={(ูุต) => ุชุญุฏูุซ_ุงููุจูุบ_ุงููุณุชุญู_ุงููุฑุฏู(ูุณุชุฎุฏู.id, ูุต)}
              keyboardType="numeric"
              placeholder="0"
              placeholderTextColor={isDark ? '#666' : '#999'}
            />
            <ThemedText type="caption" style={styles.currencyLabel}>
              {ุงูุฑุญูุฉ.ุงูุนููุฉ}
            </ThemedText>
          </View>
        )}
      </View>
    );
  };

  return (
    <ThemedView style={styles.container}>
      {/* ุงูุฑุฃุณ */}
      <View style={[styles.header, { backgroundColor: isDark ? '#1C1C1E' : '#F2F2F7' }]}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Ionicons name="arrow-forward" size={24} color={isDark ? '#FFFFFF' : '#000000'} />
        </TouchableOpacity>
        <ThemedText type="subtitle" style={styles.headerTitle}>
          ุชุนุฏูู ุงูุฑุญูุฉ
        </ThemedText>
        <TouchableOpacity
          style={styles.saveButton}
          onPress={ุญูุธ_ุงูุชุนุฏููุงุช}
        >
          <ThemedText style={[styles.saveButtonText, { color: '#007AFF' }]}>
            ุญูุธ
          </ThemedText>
        </TouchableOpacity>
      </View>

      <KeyboardAvoidingView 
        style={styles.content}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <ScrollView 
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {/* ูุนูููุงุช ุงูุฑุญูุฉ ุงูุฃุณุงุณูุฉ */}
          <View style={styles.section}>
            <ThemedText type="subtitle" style={styles.sectionTitle}>
              ูุนูููุงุช ุงูุฑุญูุฉ
            </ThemedText>
            
            <View style={[styles.inputContainer, { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' }]}>
              <ThemedText type="caption" style={styles.inputLabel}>
                ุงุณู ุงูุฑุญูุฉ *
              </ThemedText>
              <TextInput
                style={[
                  styles.textInput,
                  { 
                    color: isDark ? '#FFFFFF' : '#000000',
                    borderColor: isDark ? '#666' : '#CCC'
                  }
                ]}
                value={ุงุณู_ุงูุฑุญูุฉ}
                onChangeText={ุชุนููู_ุงุณู_ุงูุฑุญูุฉ}
                placeholder="ูุซุงู: ุฑุญูุฉ ุงูุฅุณููุฏุฑูุฉ"
                placeholderTextColor={isDark ? '#666' : '#999'}
              />
            </View>

            <View style={[styles.inputContainer, { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' }]}>
              <ThemedText type="caption" style={styles.inputLabel}>
                ูุตู ุงูุฑุญูุฉ
              </ThemedText>
              <TextInput
                style={[
                  styles.textInput,
                  styles.textArea,
                  { 
                    color: isDark ? '#FFFFFF' : '#000000',
                    borderColor: isDark ? '#666' : '#CCC'
                  }
                ]}
                value={ูุตู_ุงูุฑุญูุฉ}
                onChangeText={ุชุนููู_ูุตู_ุงูุฑุญูุฉ}
                placeholder="ูุตู ูุฎุชุตุฑ ููุฑุญูุฉ..."
                placeholderTextColor={isDark ? '#666' : '#999'}
                multiline
                numberOfLines={3}
              />
            </View>

            {/* ุงูุชูุงุฑูุฎ */}
            <View style={styles.dateRow}>
              <TouchableOpacity
                style={[styles.dateButton, { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' }]}
                onPress={() => ุชุนููู_ุนุฑุถ_ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ(true)}
              >
                <ThemedText type="caption" style={styles.dateLabel}>
                  ุชุงุฑูุฎ ุงูุจุฏุงูุฉ
                </ThemedText>
                <ThemedText type="default" style={styles.dateValue}>
                  {ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ.toLocaleDateString('ar-EG')}
                </ThemedText>
              </TouchableOpacity>

              <TouchableOpacity
                style={[styles.dateButton, { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' }]}
                onPress={() => ุชุนููู_ุนุฑุถ_ุชุงุฑูุฎ_ุงูููุงูุฉ(true)}
              >
                <ThemedText type="caption" style={styles.dateLabel}>
                  ุชุงุฑูุฎ ุงูููุงูุฉ
                </ThemedText>
                <ThemedText type="default" style={styles.dateValue}>
                  {ุชุงุฑูุฎ_ุงูููุงูุฉ.toLocaleDateString('ar-EG')}
                </ThemedText>
              </TouchableOpacity>
            </View>

            {/* ุงููุจูุบ ุงููุณุชุญู ุงูุนุงู */}
            <View style={[styles.inputContainer, { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' }]}>
              <View style={styles.generalAmountHeader}>
                <ThemedText type="caption" style={styles.inputLabel}>
                  ุงููุจูุบ ุงููุณุชุญู ุงูุนุงู
                </ThemedText>
                <TouchableOpacity
                  style={[styles.applyButton, { backgroundColor: '#007AFF' }]}
                  onPress={ุชุทุจูู_ุงููุจูุบ_ุงูุนุงู_ุนูู_ุงูุฌููุน}
                >
                  <ThemedText style={[styles.applyButtonText, { color: 'white' }]}>
                    ุชุทุจูู ุนูู ุงูุฌููุน
                  </ThemedText>
                </TouchableOpacity>
              </View>
              <TextInput
                style={[
                  styles.textInput,
                  { 
                    color: isDark ? '#FFFFFF' : '#000000',
                    borderColor: isDark ? '#666' : '#CCC'
                  }
                ]}
                value={ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู}
                onChangeText={ุชุนููู_ุงููุจูุบ_ุงููุณุชุญู_ุงูุนุงู}
                keyboardType="numeric"
                placeholder="0"
                placeholderTextColor={isDark ? '#666' : '#999'}
              />
            </View>
          </View>

          {/* ุงุฎุชูุงุฑ ุงููุดุงุฑููู */}
          <View style={styles.section}>
            <ThemedText type="subtitle" style={styles.sectionTitle}>
              ุงููุดุงุฑููู ({ุงููุดุงุฑููู_ุงููุญุฏุฏูู.length})
            </ThemedText>
            
            {ุงููุณุชุฎุฏููู.length === 0 ? (
              <View style={styles.emptyState}>
                <Ionicons name="people" size={48} color={isDark ? '#666' : '#CCC'} />
                <ThemedText type="caption" style={styles.emptyText}>
                  ูุง ููุฌุฏ ูุดุงุฑููู ูุชุงุญูู
                </ThemedText>
                <TouchableOpacity
                  style={[styles.primaryButton, { backgroundColor: '#007AFF', marginTop: 16 }]}
                  onPress={() => router.push('/manage-users')}
                >
                  <ThemedText style={[styles.buttonText, { color: 'white' }]}>
                    ุฅุถุงูุฉ ูุดุงุฑููู
                  </ThemedText>
                </TouchableOpacity>
              </View>
            ) : (
              <View style={styles.usersContainer}>
                {ุงููุณุชุฎุฏููู.map(ุนุฑุถ_ูุณุชุฎุฏู)}
              </View>
            )}
          </View>
        </ScrollView>
      </KeyboardAvoidingView>

      {/* Date Pickers */}
      {ุนุฑุถ_ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ && (
        <DateTimePicker
          value={ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ}
          mode="date"
          display="default"
          onChange={(event, selectedDate) => {
            ุชุนููู_ุนุฑุถ_ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ(false);
            if (selectedDate) {
              ุชุนููู_ุชุงุฑูุฎ_ุงูุจุฏุงูุฉ(selectedDate);
            }
          }}
        />
      )}

      {ุนุฑุถ_ุชุงุฑูุฎ_ุงูููุงูุฉ && (
        <DateTimePicker
          value={ุชุงุฑูุฎ_ุงูููุงูุฉ}
          mode="date"
          display="default"
          onChange={(event, selectedDate) => {
            ุชุนููู_ุนุฑุถ_ุชุงุฑูุฎ_ุงูููุงูุฉ(false);
            if (selectedDate) {
              ุชุนููู_ุชุงุฑูุฎ_ุงูููุงูุฉ(selectedDate);
            }
          }}
        />
      )}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
  },
  backButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitle: {
    flex: 1,
    textAlign: 'center',
  },
  saveButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  saveButtonText: {
    fontSize: 16,
    fontFamily: 'Almarai-Bold',
  },
  content: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 20,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    marginBottom: 16,
  },
  inputContainer: {
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  inputLabel: {
    marginBottom: 8,
    opacity: 0.7,
  },
  textInput: {
    fontSize: 16,
    fontFamily: 'Almarai-Regular',
    textAlign: 'right',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  dateRow: {
    flexDirection: 'row',
    gap: 12,
  },
  dateButton: {
    flex: 1,
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  dateLabel: {
    marginBottom: 4,
    opacity: 0.7,
  },
  dateValue: {
    fontFamily: 'Almarai-Bold',
  },
  generalAmountHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  applyButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  applyButtonText: {
    fontSize: 12,
    fontFamily: 'Almarai-Bold',
  },
  usersContainer: {
    gap: 12,
  },
  userContainer: {
    marginBottom: 8,
  },
  userCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: 'transparent',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  userAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#F0F0F0',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 12,
  },
  avatarText: {
    fontSize: 20,
  },
  userDetails: {
    flex: 1,
  },
  userName: {
    marginBottom: 2,
  },
  userStats: {
    flexDirection: 'row',
    gap: 12,
  },
  statText: {
    fontSize: 12,
    opacity: 0.8,
  },
  checkboxContainer: {
    width: 24,
    height: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  checkbox: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
  },
  amountContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderRadius: 8,
    marginTop: 8,
    gap: 8,
  },
  amountLabel: {
    flex: 1,
  },
  amountInput: {
    width: 80,
    height: 40,
    borderWidth: 1,
    borderRadius: 6,
    paddingHorizontal: 8,
    textAlign: 'center',
    fontSize: 16,
    fontFamily: 'Almarai-Regular',
  },
  currencyLabel: {
    minWidth: 40,
    textAlign: 'center',
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 40,
  },
  emptyText: {
    marginTop: 12,
    textAlign: 'center',
  },
  primaryButton: {
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 8,
  },
  buttonText: {
    fontSize: 14,
    fontFamily: 'Almarai-Bold',
    textAlign: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  errorTitle: {
    marginTop: 16,
    marginBottom: 24,
    textAlign: 'center',
  },
  button: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
});
