import React, { useState } from 'react';
import {
  View,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  Alert,
  Modal,
  Image,
} from 'react-native';
import { router } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { useAppSelector, useAppDispatch } from '@/store/hooks';
import { ุฅุถุงูุฉ_ูุณุชุฎุฏู, ุชุญุฏูุซ_ูุณุชุฎุฏู, ุญุฐู_ูุณุชุฎุฏู } from '@/store/slices/ูุณุชุฎุฏูููSlice';
import { useColorScheme } from '@/hooks/useColorScheme';
import { ุชูููุฏ_ูุนุฑู } from '@/utils/helpers';

const ุงูุตูุฑ_ุงูุฑูุฒูุฉ_ุงูุงูุชุฑุงุถูุฉ = [
  '๐จโ๐ผ', '๐ฉโ๐ผ', '๐จโ๐', '๐ฉโ๐', '๐จโโ๏ธ', '๐ฉโโ๏ธ',
  '๐จโ๐ง', '๐ฉโ๐ง', '๐จโ๐ณ', '๐ฉโ๐ณ', '๐จโ๐จ', '๐ฉโ๐จ',
  '๐จโ๐ป', '๐ฉโ๐ป', '๐จโ๐', '๐ฉโ๐', '๐งโ๐ค', '๐ฉโ๐ค',
  '๐จโ๐ซ', '๐ฉโ๐ซ', '๐จโ๐พ', '๐ฉโ๐พ', '๐จโโ๏ธ', '๐ฉโโ๏ธ'
];

export default function ุดุงุดุฉ_ุฅุฏุงุฑุฉ_ุงููุณุชุฎุฏููู() {
  const colorScheme = useColorScheme();
  const dispatch = useAppDispatch();
  
  const { ุงููุณุชุฎุฏููู } = useAppSelector(state => state.ูุณุชุฎุฏููู);

  const [ุนุฑุถ_ูุงูุฐุฉ_ุงูุฅุถุงูุฉ, ุชุนููู_ุนุฑุถ_ูุงูุฐุฉ_ุงูุฅุถุงูุฉ] = useState(false);
  const [ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ, ุชุนููู_ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ] = useState(false);
  const [ุงููุณุชุฎุฏู_ุงููุญุฑุฑ, ุชุนููู_ุงููุณุชุฎุฏู_ุงููุญุฑุฑ] = useState<any>(null);
  const [ุงุณู_ุงููุณุชุฎุฏู, ุชุนููู_ุงุณู_ุงููุณุชุฎุฏู] = useState('');
  const [ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ, ุชุนููู_ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ] = useState('๐ค');

  const isDark = colorScheme === 'dark';

  const ุฅุนุงุฏุฉ_ุชุนููู_ุงููููุฐุฌ = () => {
    ุชุนููู_ุงุณู_ุงููุณุชุฎุฏู('');
    ุชุนููู_ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ('๐ค');
    ุชุนููู_ุงููุณุชุฎุฏู_ุงููุญุฑุฑ(null);
  };

  const ูุชุญ_ูุงูุฐุฉ_ุฅุถุงูุฉ_ูุณุชุฎุฏู = () => {
    ุฅุนุงุฏุฉ_ุชุนููู_ุงููููุฐุฌ();
    ุชุนููู_ุนุฑุถ_ูุงูุฐุฉ_ุงูุฅุถุงูุฉ(true);
  };

  const ูุชุญ_ูุงูุฐุฉ_ุชุนุฏูู_ูุณุชุฎุฏู = (ูุณุชุฎุฏู: any) => {
    ุชุนููู_ุงููุณุชุฎุฏู_ุงููุญุฑุฑ(ูุณุชุฎุฏู);
    ุชุนููู_ุงุณู_ุงููุณุชุฎุฏู(ูุณุชุฎุฏู.ุงูุงุณู);
    ุชุนููู_ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ(ูุณุชุฎุฏู.ุงูุตูุฑุฉ_ุงูุฑูุฒูุฉ || '๐ค');
    ุชุนููู_ุนุฑุถ_ูุงูุฐุฉ_ุงูุฅุถุงูุฉ(true);
  };

  const ุญูุธ_ุงููุณุชุฎุฏู = () => {
    if (!ุงุณู_ุงููุณุชุฎุฏู.trim()) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุฅุฏุฎุงู ุงุณู ุงููุณุชุฎุฏู');
      return;
    }

    if (ุงููุณุชุฎุฏู_ุงููุญุฑุฑ) {
      // ุชุญุฏูุซ ูุณุชุฎุฏู ููุฌูุฏ
      const ูุณุชุฎุฏู_ูุญุฏุซ = {
        ...ุงููุณุชุฎุฏู_ุงููุญุฑุฑ,
        ุงูุงุณู: ุงุณู_ุงููุณุชุฎุฏู.trim(),
        ุงูุตูุฑุฉ_ุงูุฑูุฒูุฉ: ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ,
      };
      dispatch(ุชุญุฏูุซ_ูุณุชุฎุฏู(ูุณุชุฎุฏู_ูุญุฏุซ));
      Alert.alert('ูุฌุญ', 'ุชู ุชุญุฏูุซ ุงููุณุชุฎุฏู ุจูุฌุงุญ');
    } else {
      // ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ
      const ูุณุชุฎุฏู_ุฌุฏูุฏ = {
        id: ุชูููุฏ_ูุนุฑู(),
        ุงูุงุณู: ุงุณู_ุงููุณุชุฎุฏู.trim(),
        ุงูุตูุฑุฉ_ุงูุฑูุฒูุฉ: ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ,
        ุชุงุฑูุฎ_ุงูุฅูุดุงุก: new Date().toISOString(),
      };
      dispatch(ุฅุถุงูุฉ_ูุณุชุฎุฏู(ูุณุชุฎุฏู_ุฌุฏูุฏ));
      Alert.alert('ูุฌุญ', 'ุชู ุฅุถุงูุฉ ุงููุณุชุฎุฏู ุจูุฌุงุญ');
    }

    ุชุนููู_ุนุฑุถ_ูุงูุฐุฉ_ุงูุฅุถุงูุฉ(false);
    ุฅุนุงุฏุฉ_ุชุนููู_ุงููููุฐุฌ();
  };

  const ุญุฐู_ูุณุชุฎุฏู_ูุน_ุงูุชุฃููุฏ = (ูุณุชุฎุฏู: any) => {
    Alert.alert(
      'ุชุฃููุฏ ุงูุญุฐู',
      `ูู ุฃูุช ูุชุฃูุฏ ูู ุฑุบุจุชู ูู ุญุฐู ${ูุณุชุฎุฏู.ุงูุงุณู}ุ`,
      [
        { text: 'ุฅูุบุงุก', style: 'cancel' },
        {
          text: 'ุญุฐู',
          style: 'destructive',
          onPress: () => {
            dispatch(ุญุฐู_ูุณุชุฎุฏู(ูุณุชุฎุฏู.id));
            Alert.alert('ุชู ุงูุญุฐู', 'ุชู ุญุฐู ุงููุณุชุฎุฏู ุจูุฌุงุญ');
          },
        },
      ]
    );
  };

  const ุงุฎุชูุงุฑ_ุตูุฑุฉ_ูู_ุงููุนุฑุถ = async () => {
    try {
      const ูุชูุฌุฉ = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.5,
      });

      if (!ูุชูุฌุฉ.canceled && ูุชูุฌุฉ.assets[0]) {
        ุชุนููู_ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ(ูุชูุฌุฉ.assets[0].uri);
        ุชุนููู_ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ(false);
      }
    } catch (ุฎุทุฃ) {
      Alert.alert('ุฎุทุฃ', 'ูุดู ูู ุงุฎุชูุงุฑ ุงูุตูุฑุฉ');
    }
  };

  const ุงูุชูุงุท_ุตูุฑุฉ_ุจุงููุงููุฑุง = async () => {
    try {
      const ูุชูุฌุฉ = await ImagePicker.launchCameraAsync({
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.5,
      });

      if (!ูุชูุฌุฉ.canceled && ูุชูุฌุฉ.assets[0]) {
        ุชุนููู_ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ(ูุชูุฌุฉ.assets[0].uri);
        ุชุนููู_ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ(false);
      }
    } catch (ุฎุทุฃ) {
      Alert.alert('ุฎุทุฃ', 'ูุดู ูู ุงูุชูุงุท ุงูุตูุฑุฉ');
    }
  };

  const ุนุฑุถ_ุจุทุงูุฉ_ูุณุชุฎุฏู = (ูุณุชุฎุฏู: any) => (
    <View
      key={ูุณุชุฎุฏู.id}
      style={[styles.userCard, { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' }]}
    >
      <View style={styles.userInfo}>
        <View style={styles.userAvatar}>
          {ูุณุชุฎุฏู.ุงูุตูุฑุฉ_ุงูุฑูุฒูุฉ?.startsWith('http') || ูุณุชุฎุฏู.ุงูุตูุฑุฉ_ุงูุฑูุฒูุฉ?.startsWith('file') ? (
            <Image 
              source={{ uri: ูุณุชุฎุฏู.ุงูุตูุฑุฉ_ุงูุฑูุฒูุฉ }} 
              style={styles.avatarImage}
            />
          ) : (
            <ThemedText style={styles.avatarText}>
              {ูุณุชุฎุฏู.ุงูุตูุฑุฉ_ุงูุฑูุฒูุฉ || '๐ค'}
            </ThemedText>
          )}
        </View>
        <View style={styles.userDetails}>
          <ThemedText type="defaultSemiBold" style={styles.userName}>
            {ูุณุชุฎุฏู.ุงูุงุณู}
          </ThemedText>
          <ThemedText type="caption" style={styles.userDate}>
            ุฃุถูู ูู {new Date(ูุณุชุฎุฏู.ุชุงุฑูุฎ_ุงูุฅูุดุงุก).toLocaleDateString('ar-EG')}
          </ThemedText>
        </View>
      </View>
      
      <View style={styles.userActions}>
        <TouchableOpacity
          style={[styles.actionButton, { backgroundColor: '#007AFF' }]}
          onPress={() => ูุชุญ_ูุงูุฐุฉ_ุชุนุฏูู_ูุณุชุฎุฏู(ูุณุชุฎุฏู)}
        >
          <Ionicons name="create" size={16} color="white" />
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.actionButton, { backgroundColor: '#FF3B30' }]}
          onPress={() => ุญุฐู_ูุณุชุฎุฏู_ูุน_ุงูุชุฃููุฏ(ูุณุชุฎุฏู)}
        >
          <Ionicons name="trash" size={16} color="white" />
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <ThemedView style={styles.container}>
      {/* ุงูุฑุฃุณ */}
      <View style={[styles.header, { backgroundColor: isDark ? '#1C1C1E' : '#F2F2F7' }]}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Ionicons name="arrow-forward" size={24} color={isDark ? '#FFFFFF' : '#000000'} />
        </TouchableOpacity>
        <ThemedText type="subtitle" style={styles.headerTitle}>
          ุฅุฏุงุฑุฉ ุงููุดุงุฑููู
        </ThemedText>
        <TouchableOpacity
          style={styles.addButton}
          onPress={ูุชุญ_ูุงูุฐุฉ_ุฅุถุงูุฉ_ูุณุชุฎุฏู}
        >
          <Ionicons name="add" size={24} color="#007AFF" />
        </TouchableOpacity>
      </View>

      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {ุงููุณุชุฎุฏููู.length === 0 ? (
          <View style={styles.emptyState}>
            <Ionicons name="people" size={64} color={isDark ? '#666' : '#CCC'} />
            <ThemedText type="subtitle" style={styles.emptyTitle}>
              ูุง ููุฌุฏ ูุดุงุฑููู ุจุนุฏ
            </ThemedText>
            <ThemedText type="caption" style={styles.emptyDescription}>
              ุฃุถู ูุดุงุฑููู ุฌุฏุฏ ูุจุฏุก ุชุชุจุน ุงููุตุงุฑูู ูุนูู
            </ThemedText>
            <TouchableOpacity
              style={[styles.primaryButton, { backgroundColor: '#007AFF' }]}
              onPress={ูุชุญ_ูุงูุฐุฉ_ุฅุถุงูุฉ_ูุณุชุฎุฏู}
            >
              <ThemedText style={[styles.buttonText, { color: 'white' }]}>
                ุฅุถุงูุฉ ูุดุงุฑู ุฌุฏูุฏ
              </ThemedText>
            </TouchableOpacity>
          </View>
        ) : (
          <View style={styles.usersContainer}>
            <ThemedText type="caption" style={styles.usersCount}>
              {ุงููุณุชุฎุฏููู.length} ูุดุงุฑู
            </ThemedText>
            {ุงููุณุชุฎุฏููู.map(ุนุฑุถ_ุจุทุงูุฉ_ูุณุชุฎุฏู)}
          </View>
        )}
      </ScrollView>

      {/* ูุงูุฐุฉ ุฅุถุงูุฉ/ุชุนุฏูู ูุณุชุฎุฏู */}
      <Modal
        visible={ุนุฑุถ_ูุงูุฐุฉ_ุงูุฅุถุงูุฉ}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => ุชุนููู_ุนุฑุถ_ูุงูุฐุฉ_ุงูุฅุถุงูุฉ(false)}
      >
        <ThemedView style={styles.modalContainer}>
          <View style={[styles.modalHeader, { backgroundColor: isDark ? '#1C1C1E' : '#F2F2F7' }]}>
            <TouchableOpacity
              onPress={() => ุชุนููู_ุนุฑุถ_ูุงูุฐุฉ_ุงูุฅุถุงูุฉ(false)}
              style={styles.modalCloseButton}
            >
              <ThemedText style={[styles.modalCloseText, { color: '#007AFF' }]}>
                ุฅูุบุงุก
              </ThemedText>
            </TouchableOpacity>
            <ThemedText type="subtitle" style={styles.modalTitle}>
              {ุงููุณุชุฎุฏู_ุงููุญุฑุฑ ? 'ุชุนุฏูู ูุดุงุฑู' : 'ุฅุถุงูุฉ ูุดุงุฑู ุฌุฏูุฏ'}
            </ThemedText>
            <TouchableOpacity
              onPress={ุญูุธ_ุงููุณุชุฎุฏู}
              style={styles.modalSaveButton}
            >
              <ThemedText style={[styles.modalSaveText, { color: '#007AFF' }]}>
                ุญูุธ
              </ThemedText>
            </TouchableOpacity>
          </View>
          
          <ScrollView style={styles.modalContent}>
            {/* ุงุฎุชูุงุฑ ุงูุตูุฑุฉ */}
            <View style={styles.avatarSection}>
              <ThemedText type="defaultSemiBold" style={styles.sectionTitle}>
                ุงูุตูุฑุฉ ุงูุดุฎุตูุฉ
              </ThemedText>
              <TouchableOpacity
                style={styles.avatarSelector}
                onPress={() => ุชุนููู_ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ(true)}
              >
                <View style={[styles.selectedAvatar, { backgroundColor: isDark ? '#2C2C2E' : '#F0F0F0' }]}>
                  {ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ?.startsWith('http') || ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ?.startsWith('file') ? (
                    <Image 
                      source={{ uri: ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ }} 
                      style={styles.selectedAvatarImage}
                    />
                  ) : (
                    <ThemedText style={styles.selectedAvatarText}>
                      {ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ}
                    </ThemedText>
                  )}
                </View>
                <ThemedText type="caption" style={styles.avatarHint}>
                  ุงุถุบุท ูุชุบููุฑ ุงูุตูุฑุฉ
                </ThemedText>
              </TouchableOpacity>
            </View>

            {/* ุฅุฏุฎุงู ุงูุงุณู */}
            <View style={styles.nameSection}>
              <ThemedText type="defaultSemiBold" style={styles.sectionTitle}>
                ุงูุงุณู *
              </ThemedText>
              <TextInput
                style={[
                  styles.nameInput,
                  { 
                    backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF',
                    color: isDark ? '#FFFFFF' : '#000000',
                    borderColor: isDark ? '#666' : '#CCC'
                  }
                ]}
                value={ุงุณู_ุงููุณุชุฎุฏู}
                onChangeText={ุชุนููู_ุงุณู_ุงููุณุชุฎุฏู}
                placeholder="ูุซุงู: ุฃุญูุฏ ูุญูุฏ"
                placeholderTextColor={isDark ? '#666' : '#999'}
              />
            </View>
          </ScrollView>
        </ThemedView>
      </Modal>

      {/* ูุงูุฐุฉ ุงุฎุชูุงุฑ ุงูุตูุฑุฉ */}
      <Modal
        visible={ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => ุชุนููู_ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ(false)}
      >
        <ThemedView style={styles.modalContainer}>
          <View style={[styles.modalHeader, { backgroundColor: isDark ? '#1C1C1E' : '#F2F2F7' }]}>
            <TouchableOpacity
              onPress={() => ุชุนููู_ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ(false)}
              style={styles.modalCloseButton}
            >
              <ThemedText style={[styles.modalCloseText, { color: '#007AFF' }]}>
                ุฅูุบุงุก
              </ThemedText>
            </TouchableOpacity>
            <ThemedText type="subtitle" style={styles.modalTitle}>
              ุงุฎุชูุงุฑ ุงูุตูุฑุฉ
            </ThemedText>
            <View style={styles.modalCloseButton} />
          </View>
          
          <ScrollView style={styles.modalContent}>
            {/* ุฎูุงุฑุงุช ุงูุตูุฑุฉ */}
            <View style={styles.imageOptionsSection}>
              <TouchableOpacity
                style={[styles.imageOption, { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' }]}
                onPress={ุงุฎุชูุงุฑ_ุตูุฑุฉ_ูู_ุงููุนุฑุถ}
              >
                <Ionicons name="images" size={24} color="#007AFF" />
                <ThemedText type="default" style={styles.imageOptionText}>
                  ุงุฎุชูุงุฑ ูู ุงููุนุฑุถ
                </ThemedText>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={[styles.imageOption, { backgroundColor: isDark ? '#2C2C2E' : '#FFFFFF' }]}
                onPress={ุงูุชูุงุท_ุตูุฑุฉ_ุจุงููุงููุฑุง}
              >
                <Ionicons name="camera" size={24} color="#007AFF" />
                <ThemedText type="default" style={styles.imageOptionText}>
                  ุงูุชูุงุท ุตูุฑุฉ
                </ThemedText>
              </TouchableOpacity>
            </View>

            {/* ุงูุตูุฑ ุงูุฑูุฒูุฉ ุงูุงูุชุฑุงุถูุฉ */}
            <View style={styles.defaultAvatarsSection}>
              <ThemedText type="defaultSemiBold" style={styles.sectionTitle}>
                ุฃู ุงุฎุชุฑ ุฑูุฒ ุชุนุจูุฑู
              </ThemedText>
              <View style={styles.avatarsGrid}>
                {ุงูุตูุฑ_ุงูุฑูุฒูุฉ_ุงูุงูุชุฑุงุถูุฉ.map((ุฑูุฒ, ููุฑุณ) => (
                  <TouchableOpacity
                    key={ููุฑุณ}
                    style={[
                      styles.avatarOption,
                      { backgroundColor: isDark ? '#2C2C2E' : '#F0F0F0' },
                      ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ === ุฑูุฒ && { borderColor: '#007AFF', borderWidth: 2 }
                    ]}
                    onPress={() => {
                      ุชุนููู_ุงูุตูุฑุฉ_ุงููุฎุชุงุฑุฉ(ุฑูุฒ);
                      ุชุนููู_ุนุฑุถ_ุงุฎุชูุงุฑ_ุงูุตูุฑุฉ(false);
                    }}
                  >
                    <ThemedText style={styles.avatarOptionText}>
                      {ุฑูุฒ}
                    </ThemedText>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          </ScrollView>
        </ThemedView>
      </Modal>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
  },
  backButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitle: {
    flex: 1,
    textAlign: 'center',
  },
  addButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 20,
  },
  usersContainer: {
    gap: 12,
  },
  usersCount: {
    marginBottom: 16,
    opacity: 0.7,
    textAlign: 'center',
  },
  userCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  userAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#F0F0F0',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 12,
    overflow: 'hidden',
  },
  avatarImage: {
    width: 50,
    height: 50,
    borderRadius: 25,
  },
  avatarText: {
    fontSize: 24,
  },
  userDetails: {
    flex: 1,
  },
  userName: {
    marginBottom: 2,
  },
  userDate: {
    opacity: 0.7,
  },
  userActions: {
    flexDirection: 'row',
    gap: 8,
  },
  actionButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyTitle: {
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyDescription: {
    textAlign: 'center',
    marginBottom: 24,
    paddingHorizontal: 40,
  },
  primaryButton: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  buttonText: {
    fontSize: 16,
    fontFamily: 'Almarai-Bold',
    textAlign: 'center',
  },
  modalContainer: {
    flex: 1,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
  },
  modalCloseButton: {
    minWidth: 60,
  },
  modalCloseText: {
    fontSize: 16,
    fontFamily: 'Almarai-Regular',
  },
  modalTitle: {
    flex: 1,
    textAlign: 'center',
  },
  modalSaveButton: {
    minWidth: 60,
    alignItems: 'flex-end',
  },
  modalSaveText: {
    fontSize: 16,
    fontFamily: 'Almarai-Bold',
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  avatarSection: {
    alignItems: 'center',
    marginBottom: 24,
  },
  sectionTitle: {
    marginBottom: 16,
    textAlign: 'center',
  },
  avatarSelector: {
    alignItems: 'center',
  },
  selectedAvatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
    overflow: 'hidden',
  },
  selectedAvatarImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
  },
  selectedAvatarText: {
    fontSize: 48,
  },
  avatarHint: {
    opacity: 0.7,
    textAlign: 'center',
  },
  nameSection: {
    marginBottom: 24,
  },
  nameInput: {
    fontSize: 16,
    fontFamily: 'Almarai-Regular',
    textAlign: 'right',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
  },
  imageOptionsSection: {
    marginBottom: 24,
    gap: 12,
  },
  imageOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    borderRadius: 12,
    gap: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  imageOptionText: {
    flex: 1,
  },
  defaultAvatarsSection: {
    marginBottom: 24,
  },
  avatarsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
    justifyContent: 'center',
  },
  avatarOption: {
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'transparent',
  },
  avatarOptionText: {
    fontSize: 28,
  },
});
